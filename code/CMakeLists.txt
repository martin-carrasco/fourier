# <Copyright Holder>. Copyright (C) <Copyright Year(s)>. <License>.

#
# Project Properties 
CMAKE_MINIMUM_REQUIRED (VERSION 3.1)
PROJECT (projectname)
SET (APPLICATION_NAME "Fourier Me ( ͡° ͜ʖ ͡°)")
SET (APPLICATION_CODENAME "${PROJECT_NAME}")
SET (APPLICATION_COPYRIGHT_YEARS "2019")
SET (APPLICATION_VERSION_MAJOR 1)
SET (APPLICATION_VERSION_MINOR 0)
SET (APPLICATION_VERSION_PATCH 0)
SET (APPLICATION_VERSION_TYPE SNAPSHOT)
SET (APPLICATION_VERSION_STRING "${APPLICATION_VERSION_MAJOR}.${APPLICATION_VERSION_MINOR}.${APPLICATION_VERSION_PATCH}-${APPLICATION_VERSION_TYPE}")
SET (APPLICATION_VENDOR_ID "com.yourcompany")
SET (APPLICATION_VENDOR_NAME "Your Company")
SET (APPLICATION_VENDOR_URL "yourcompany.com")
SET (APPLICATION_ID "${APPLICATION_VENDOR_ID}.${PROJECT_NAME}")
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

#
# Debugging Options
#
SET (CMAKE_VERBOSE_MAKEFILE 1) # Use 1 for debugging, 0 for release

#
# Project Output Paths
#
SET (MAINFOLDER ${PROJECT_SOURCE_DIR})
SET (EXECUTABLE_OUTPUT_PATH "${MAINFOLDER}/bin")
SET (LIBRARY_OUTPUT_PATH "${MAINFOLDER}/lib")

#
# Project Search Paths
#
LIST (APPEND CMAKE_PREFIX_PATH "${MAINFOLDER}")
INCLUDE_DIRECTORIES("${MAINFOLDER}/include")

#
# Locate Project Prerequisites
#

FIND_PACKAGE(PkgConfig)

# FIND_PACKAGE(PythonInterp)
#
# if (PYTHONINTERP_FOUND)
#   if (UNIX AND NOT APPLE)
#     if (PYTHON_VERSION_MAJOR EQUAL 3)
#         FIND_PACKAGE(Boost COMPONENTS python${PYTHON_VERSION_SUFFIX})
#         FIND_PACKAGE(PythonInterp 3)
#         FIND_PACKAGE(PythonLibs 3 REQUIRED)
#     else()
#         FIND_PACKAGE(Boost COMPONENTS python)
#         FIND_PACKAGE(PythonInterp)
#         FIND_PACKAGE(PythonLibs REQUIRED)
#     endif()
#   else()
#     if (PYTHON_VERSION_MAJOR EQUAL 3)
#         FIND_PACKAGE(Boost COMPONENTS python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR})
#         FIND_PACKAGE(PythonInterp 3)
#         FIND_PACKAGE(PythonLibs 3 REQUIRED)
#     else()
#         FIND_PACKAGE(Boost COMPONENTS python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR})
#         FIND_PACKAGE(PythonInterp)
#         FIND_PACKAGE(PythonLibs REQUIRED)
#     endif()
#   endif()
# else()
#     message("Python not found")
# endif()
#
#
# message(STATUS "PYTHON_LIBRARIES = ${PYTHON_LIBRARIES}")
# message(STATUS "PYTHON_EXECUTABLE = ${PYTHON_EXECUTABLE}")
# message(STATUS "PYTHON_INCLUDE_DIRS = ${PYTHON_INCLUDE_DIRS}")
# message(STATUS "Boost_LIBRARIES = ${Boost_LIBRARIES}")
#
# ENABLE_TESTING()
# INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS} ${PYTHON_INCLUDE_DIRS})
#
# PKG_CHECK_MODULES(GTKMM REQUIRED gtkmm-2.4)
# INCLUDE_DIRECTORIES(${GTKMM_INCLUDE_DIRS})
# LINK_DIRECTORIES(${GTKMM_LIBRARY_DIRS})
#
# PKG_CHECK_MODULES(PYGTK REQUIRED pygtk-2.0)
# INCLUDE_DIRECTORIES(${PYGTK_INCLUDE_DIRS})
# LINK_DIRECTORIES(${PYGTK_LIBRARY_DIRS})

PKG_CHECK_MODULES(SFMLall REQUIRED sfml-all)
INCLUDE_DIRECTORIES(${SFMLall_INCLUDE_DIRS})
LINK_DIRECTORIES(${SFMLall_LIBRARY_DIRS})

PKG_CHECK_MODULES(PYTHON REQUIRED python3)
INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_DIRS})
LINK_DIRECTORIES(${PYTHON_LIBRARY_DIRS})


PKG_CHECK_MODULES(OpenCV REQUIRED opencv4)
FIND_PACKAGE(OpenCV REQUIRED)
INCLUDE_DIRECTORIES(${OpenCV_INCLUDE_DIRS})
LINK_DIRECTORIES(${OpenCV_LINK_DIRS})

LINK_DIRECTORIES("${MAINFOLDER}/lib")

#
# Configure Files
#
FILE (GLOB_RECURSE CONFIGINPUTS1 include/*.in.h.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS2 include/*.h.in.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS3 src/*.in.h.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS4 src/*.h.in.cmake)
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS1}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS2}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS3}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS4}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS5}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS6}")
FOREACH (CONFIGINPUT ${CONFIGINPUTS})
    STRING (REPLACE ".in.h.cmake" ".h" CONFIGOUTPUT1 "${CONFIGINPUT}")
    STRING (REPLACE ".h.in.cmake" ".h" CONFIGOUTPUT2 "${CONFIGOUTPUT1}")
    CONFIGURE_FILE ("${CONFIGINPUT}" "${CONFIGOUTPUT2}")
ENDFOREACH (CONFIGINPUT ${CONFIGINPUTS})

#
# Add Build Targets
#
ADD_SUBDIRECTORY(src)

#
# Add Install Targets
#
IF (EXISTS "${MAINFOLDER}/include/${PROJECT_NAME}" AND IS_DIRECTORY "${MAINFOLDER}/include/${PROJECT_NAME}")
    INSTALL(DIRECTORY "${MAINFOLDER}/include/${PROJECT_NAME}" DESTINATION "include")
ENDIF (EXISTS "${MAINFOLDER}/include/${PROJECT_NAME}" AND IS_DIRECTORY "${MAINFOLDER}/include/${PROJECT_NAME}")

#
# Add Documentation Targets
#
#INCLUDE (DocumentationTargets)
